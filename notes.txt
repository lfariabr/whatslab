18/09
api
core
instance
leadgen
users
frontend

19/09
componente apicrmgraphql
leadgen > subidor de leads
frontend > upload.html, view_leads.html

20/09
home/core
home/botox
componente apisocialhub + graphQL
requirements.txt
send message - test.py
send message - test graphiQL

21/09
datawrestler_part1: GET from core, leadLP + LeadWPP to process
datawrestler_part2: groupby sent_message
datawrestler_part2: GET from api socialhub response of sent message
Blueprint & routes datawrestler
GraphQL datawrestler 
datawrestler_part3: GET from crm graphql appointments
datawrestler_part3: GET from crm graphql view_leads

22/09
datawrestler_part3 resolvers.py: include date filter
datawrestler_part4: resolvers.py resolve leads with same date filter
datawrestler_part5: cross with whatsapp lead to see if they're appointment or leads
datawrestler_part6: cross it all df_receive_messages
 and send_message logs
datawrestler_part7: app_context e 
blueprint run-datawrestlergit fetch origin
datawrestler_part8: apscheduler in app context

23/09
organizar .env
organizar requirements.txt
push github
vercel deploy & connect
escrever tudo o que tem no banco

24/09
Entender melhor o datarwrestler running scheduler
Mapear o erro de certificado
Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED

25/09
preparar para papo com Samir

27/09
resolver certificado disparo

28/09 
CRUD msgs componente de cadastro de mensagens (txt/foto)
header dinamico frontend core
ajuste das rotas para crud msgs
deploy github
componente cadastrar telefones no frontend
deploy github

29/09
- organizar disparo das mensagens de acordo com as regras + tokens
- criar def get_message e printar query
- fazer def get_message retornar um dicionário
- encaixar a mensagem dentro do data_wrestling
- enviar token phone number a partir do UserPhone
- encaixar o token do phone number dentro do data_wrestling
- encaixar o token e a Mensagem no Log de envios
- review today's updates

30/09
- review updates made on 29/09
- readme file
- deploy updates
- test "live" environment
- incluir no histórico o número do phone_sender
- api permitir alterar/excluir leads

01/10
- Ajuste no log, passando corretamente:
- ID: 5, LeadPhone: 11963546222, Message ID: botoxd1, 
- Status: sent, Sender PhoneNb: 11988446710, 
- Date Sent: 2024-10-01 16:28:56.213837
- conferir o  Message Log counter do datawrestler pois nao está me contando... 

02/10 papo Samir
- está seguro enviar o token desta forma? na requisicao - SIM
- vê problema em rodar a query diariamente? 30 pra frente e 30 pra trás - NAO, SEGUIR
- próximos passos rodar online, sem ser local? montamos checklist

03/10 
- implementar send_message_with_file e cherry pick_message
- cherry pick deploy
- subir arquivos no messageForms <config UPLOAD_FOLDER> (user>messages>uploads)
- salvando arquivos no servidor e ajustando o nome do arquivos
- rota para servir arquivos da pasta de upload
- exibimos no frontend o nome do arquivo e permitimos o download

04/10
- testar send_message_with_file e send_message without file cases
- test send message without file and worked with changes resolvers.apisocialhub
- delete_message_logs.py

05/10
- resolver o content-Type: multipart/form-data 
- testar send_message_with_file e send_message without file cases

06/10
- commit changes
- prepare research to use base
- https://www.postgresql.org/download/

07/10
- pensar em como estrutura SUPABASE / POSTGRESQL
- fomos de PostgreSQL
- flask db stamp head -> synch migrations
- rever estrutura supabase anterior

08/10
- resolver upload de arquivos / mensagens
- ter as opcoes supabase / sqlite > flask db stamp head
- fazer mais um teste configurando msg + msg + video e msg +foto 
- interfce para visualizar o banco de dados 
- conseguir intercalar entre supabase/sqlite
- aprender a mexer no supabase
- multiplos senders: botox/preenchimento

_________________
python wsgi.py
BACKLOG

- lidar com lentidão do banco
- criar regra no datawrestler upload leads graphQL (100% whatsapp primeiro)
- protect api access

Mapear estrutura final
- banco de dados
- domínio
- digital ocean
- http://127.0.0.1:5000 (5000 = porta firewall - para coordenar entrada/saída)
    80http e 443https - frontend do site (procorpo.com.br)
    apache / nginx (webserver) 
- administra origem da sessão do user
- faz limpeza da URL (evitar injection, parâmetros)
- requirements dentro do ambiente
- frontend + python (não precisa de infra separada: monolito)
- recebimento de arquivos? (n/a pois nao temos upload)
- limit de upload (definir)
- certificado (lets encrypt) para rodar https
    http -> texto da req direto (listener requisicoes no roteador)
    https -> junto da resposta do site, versão publica do certificado (no navegador)
    os dados sao criptografados com chave publica (chave privada no servidor transforma)

api: php laravel api geral
fila: php artisan qeue work

incluir stripe

deeper integration pro-corpo crm
- POST to crmgrahql paid media/leadLP to CRM (?) temp_lead
- POST to crmgraphql follow_up comments (pos-vendas)
